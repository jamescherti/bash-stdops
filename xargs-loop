#!/usr/bin/env bash
#
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# The `xargs-loop` script processes lines from standard input, executing a
# specified command for each line and replacing `{}` in the command with the
# current line of input. This provides flexibility by using `{}` as a
# placeholder, similar to `xargs -I {}`, but with the ability to handle each
# line individually. Unlike `xargs`, which has mutually exclusive `-L 1` and
# `-I {}` options, `xargs-loop` combines the benefits of both by enabling
# placeholder substitution and line-by-line processing.
#
# Usage:
#   cat input_file | xargs-loop command '{}'
#
# Options:
#   - The script reads lines from stdin and replaces '{}' with each line in the
#     command.
#   - The script exits with status 1 if the command does not include '{}' or if
#     any command execution fails.
#
# License:
# --------
# Copyright (C) 2012-2024 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euf -o pipefail

if [[ $# -le 1 ]]; then
  echo 'Processes lines from stdin, executing a specified command for ' >&2
  echo 'each line and replacing {} in the command with the current line of ' >&2
  echo 'input.' >&2
  echo >&2
  echo "Usage: $0 <command> <arg> [args..]" >&2
  echo
  exit 1
fi

main() {
  local errno=0
  local line
  local cmd
  local placeholder_found

  while read -r line; do
    placeholder_found=0
    cmd=()

    for arg in "$@"; do
      if [[ $arg = '{}' ]]; then
        cmd+=("$line")
        placeholder_found=1
      else
        cmd+=("$arg")
      fi
    done

    if [[ $placeholder_found -eq 0 ]]; then
      echo "$0: Error: the placeholder '{}' is required.'" >&2
      exit 1
    fi

    "${cmd[@]}" || errno=1
  done

  exit "$errno"
}

main "$@"
