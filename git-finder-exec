#!/usr/bin/env bash
#
# Requirements:
#   - git
#   - git-finder (This script is part of bash-stdops project)
#
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# The git-finder-exec recursively finds all Git repositories starting from the
# current directory using the git-finder script.
#
# It then executes the command provided as an argument in the directory of each
# Git repository.
#
# Example usage:
#   git-finder-exec pwd
#
# License:
# --------
# Copyright (C) 2012-2025 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euo pipefail

# Global variables
# ONLY_SHOW_WHEN_THERE_IS_OUTPUT=1

# shellcheck disable=SC2317
error_handler() {
  local errno="$?"
  echo "Error: ${BASH_SOURCE[1]}:${BASH_LINENO[0]}" \
    "(${BASH_COMMAND} exited with status $errno)" >&2
  exit "${errno}"
}

title() {
  local repo_path="$1"
  shift

  local cmd=("$@")

  if [[ -t 1 ]] && tput colors &>/dev/null; then
    echo -e "\e[33m${repo_path}\e[0m: ${cmd[*]}"
  else
    echo "${repo_path}: ${cmd[*]}"
  fi
}

run_command() {
  local repo_path="$1"
  shift

  local cmd=("$@")

  local errno=0
  title "$repo_path" "${cmd[@]}"
  "${cmd[@]}" || return "$?"
}

# run_command_redir_output() {
#   local repo_path="$1"
#   shift
#
#   local cmd=("$@")
#
#   local errno=0
#   local title_displayed=0
#   output=$("${cmd[@]}" | sed 's/[[:space:]]*$//' 2>&1) || errno="$?"
#   if [[ "$ONLY_SHOW_WHEN_THERE_IS_OUTPUT" -eq 0 ]] || [[ $output != "" ]]; then
#     title "$repo_path" "${cmd[@]}"
#     title_displayed=1
#     # shellcheck disable=SC2001
#     echo "$output" | sed 's/^/  /'
#   fi
#
#   if [[ $errno -ne 0 ]]; then
#     if [[ $title_displayed -eq 0 ]]; then
#       title "$repo_path" "${cmd[@]}"
#       title_displayed=1
#     fi
#
#     echo "  (Error: Exited with status $errno)"
#     return 1
#   fi
# }

main() {
  trap "error_handler" ERR
  set -o errtrace

  local command=("$@")

  if [[ "$#" -eq 0 ]]; then
    echo "Usage: $0 <command> [args...]" >&2
    exit 1
  fi

  local list_repo_path
  mapfile -t list_repo_path < <(git-finder ".")

  local errno=0
  for repo_path in "${list_repo_path[@]}"; do
    pushd . &>/dev/null
    cd "$repo_path"

    run_command "$repo_path" "${command[@]}" || errno=1
    popd &>/dev/null
  done

  if [[ $errno -ne 0 ]]; then
    echo
    echo "Failed."
  fi
  exit "$errno"
}

main "$@"
