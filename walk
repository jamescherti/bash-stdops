#!/usr/bin/env bash
#
# Requirements: rg (ripgrep) or fd or grep
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# Recursively search the specified directory and print the list of file or
# directory paths to standard output.
#
# License:
# --------
# Copyright (C) 2012-2025 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euf -o pipefail

show_usage() {
  {

    echo "Recursively search the specified directory and print the list of "
    echo "files or directories."
    echo
    echo "Usage: $0 [options] <dir>" >&2
    echo
    echo "Options:"
    echo "  -h, --help         Show this help message and exit"
    echo
    echo "  --type <type>"
    echo "      --type directory   Show only directories"
    echo "      --type d"
    echo
    echo "      --type file        Show only files"
    echo "      --type f"
    echo
    echo "      --type text        Show only text files (exclude binary files)"
    echo "      --type t"
    echo
    echo "      --type symlink     Show only symbolic links"
    echo "      --type l"
    echo
  } >&2
}

DIR=""
TYPE_FLAG="all"
LIST_METHODS=(rg fd) # 'find' removed
while [[ $# -gt 0 ]]; do
  case "$1" in
  -h | --help)
    show_usage
    exit 1
    ;;
  --type)
    shift
    case "$1" in
    f | file)
      TYPE_FLAG="file"
      ;;
    d | directory)
      TYPE_FLAG="directory"
      ;;
    t | text)
      TYPE_FLAG="text"
      ;;
    *)
      echo "Invalid type: $1 (must be f or d)" >&2
      exit 1
      ;;
    esac
    ;;
  *)
    if [[ $DIR != "" ]]; then
      echo "Invalid option: $1" >&2
      exit 1
    fi

    DIR="$1"
    ;;
  esac

  shift
done

if [[ $DIR = "" ]]; then
  show_usage
  exit 1
fi

if ! [[ -d "$DIR" ]]; then
  echo "Error: The specified directory does not exist: $DIR" >&2
  exit 1
fi

METHOD_EXECUTED=""
for METHOD in "${LIST_METHODS[@]}"; do
  # Method: rg
  # rg is faster for finding files
  if [[ $TYPE_FLAG != all ]] && [[ $TYPE_FLAG != directory ]]; then
    if [[ $METHOD = "rg" ]] && type -P rg &>/dev/null; then
      METHOD_EXECUTED="rg"
      # Removed:
      # --no-ignore-dot no-ignore-exclude no-ignore-global no-ignore-parent
      # --no-ignore-vcs
      # --no-binary
      RG_CMD=(rg --hidden --no-messages --color=never --no-heading --files)
      RG_CMD+=(--glob '!.git')
      RG_CMD+=(--glob '!.svn')
      RG_CMD+=("--" "$DIR")
      break
    fi
  fi

  # Method: fd
  if [[ $METHOD = "fd" ]] && type -P fd &>/dev/null; then
    METHOD_EXECUTED="fd"
    # --no-ignore-vcs
    RG_CMD=(fd --hidden --color=never)

    if [[ $TYPE_FLAG = text ]] || [[ $TYPE_FLAG = file ]]; then
      RG_CMD+=(--type "file")
    elif [[ $TYPE_FLAG = directory ]]; then
      RG_CMD+=(--type "directory")
    elif [[ $TYPE_FLAG != all ]]; then
      echo "Unsupported fd --type: $TYPE_FLAG" >&2
      exit 1
    fi

    RG_CMD+=(--exclude '.svn')
    RG_CMD+=(--exclude '.git')
    RG_CMD+=(".") # Regex path match
    RG_CMD+=("$DIR")
    break
  fi

  # Method: git
  # if [[ $METHOD = "git" ]] && type -P git &>/dev/null \
  #   && git -C "$DIR" rev-parse --is-inside-work-tree; then
  #   METHOD_EXECUTED="git"
  #   if [[ $IGNORE_BINARY -ne 0 ]]; then
  #     git ls-files "$DIR" | qparallel path-is -sp '{}' text
  #   else
  #     git ls-files "$DIR"
  #   fi
  #   break
  # fi

  # Method: find
  # if [[ $METHOD = "find" ]] && type -P find &>/dev/null; then
  #   METHOD_EXECUTED="find"
  #   RG_CMD=(find)
  #   RG_CMD+=("$DIR")
  #   RG_CMD+=(-type f)
  #   RG_CMD+=(-a)
  #   RG_CMD+=(-not -iwholename '*/.svn/*')
  #   RG_CMD+=("-a")
  #   RG_CMD+=(-not -iwholename '*/.git/*')
  #   RG_CMD+=(-prune)
  #   RG_CMD+=(-print)
  #   if [[ $IGNORE_BINARY -ne 0 ]]; then
  #     "${RG_CMD[@]}" | qparallel path-is -sp '{}' text
  #   else
  #     "${RG_CMD[@]}"
  #   fi
  #   break
  # fi
done

if [[ $METHOD_EXECUTED = "" ]]; then
  echo "Error: One of the following commands is required: rg, fd, or find" >&2
  exit 1
  # else
  #   echo "[INFO] Successfully executed: $METHOD_EXECUTED" >&2
else
  if [[ $TYPE_FLAG = text ]]; then
    "${RG_CMD[@]}" | qparallel path-is -sp '{}' text
  else
    "${RG_CMD[@]}"
  fi
fi
