#!/usr/bin/env bash
#
# Requirements: grep
#
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# Print the Path to stdout and exit with the code 0 if it is a binary or text
# file.
#
# Example usage:
#   path-is /Path/TO/FILE binary
#   path-is /Path/TO/FILE text
#
# License:
# --------
# Copyright (C) 2012-2025 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euf -o pipefail

show_usage() {
  {
    echo "Check whether a given file path points to a " \
      "binary file or a text file."
    echo ""
    echo "Usage: $0 [-h] <path/to/existing/file> <binary|text>"
    echo
    echo "-h    Show this help message and exit"
    echo "-s    Always exit with a status of 0"
    echo "-p    Print the path when it correspond to the specified type"
  } >&2
}

NEVER_FAIL=0
PRINT_PATH=0
while getopts ":hsp" opt; do
  case ${opt} in
  p)
    PRINT_PATH=1
    ;;
  s)
    NEVER_FAIL=1
    ;;
  h)
    show_usage
    exit 1
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  :)
    echo "Invalid option: -$OPTARG requires an argument" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

_is_binary() {
  # Grep options:
  # -------------
  # -I: Process  a  binary file as if it did not contain matching data;
  # this is equivalent to the --binary-files=without-match option.
  #
  # -q Quiet; do not write anything to standard output.
  #
  grep -Iq . "$1" || return 0
  return 1
}

if [[ $# -lt 2 ]]; then
  show_usage
  exit 1
fi

PATH_EXISTING_FILE="$1"
shift

# if ! [[ -e "$PATH_EXISTING_FILE" ]]; then
#   echo "Error: No such file or directory: $PATH_EXISTING_FILE" >&2
#   exit 1
# fi

if ! [[ -f "$PATH_EXISTING_FILE" ]]; then
  echo "Error: The following path is not a file: $PATH_EXISTING_FILE" >&2
  exit 1
fi

for REQUEST in "$@"; do
  if [[ $REQUEST = "binary" ]] && _is_binary "$PATH_EXISTING_FILE"; then
    continue
  elif [[ $REQUEST = "text" ]] && ! _is_binary "$PATH_EXISTING_FILE"; then
    continue
  fi

  if [[ $NEVER_FAIL -ne 0 ]]; then
    exit 0
  else
    printf "Error: The following path is not '%s': %s\n" \
      "$REQUEST" "$PATH_EXISTING_FILE"
    exit 1
  fi
done

if [[ $PRINT_PATH -ne 0 ]]; then
  printf "%s\n" "$PATH_EXISTING_FILE"
fi

exit 0
