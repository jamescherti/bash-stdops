#!/usr/bin/env bash
#
# Requirements:
#   - parallel: https://www.gnu.org/software/parallel/
#   - walk: included in the bash-stdops project
#   - nproc: https://savannah.gnu.org/git/?group=coreutils
#   - sed
#
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# Recursively execute a command on all files listed by the `rg --files` command.
#
# For example, to recursively `cat` all text files in `/etc`, use the following command:
# ```
# walk-run /etc cat {}
# ```
#
# (`{}` is replaced with the path to each file.)
#
# License:
# --------
# Copyright (C) 2012-2025 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

if [[ $RGFILES_RUN_CONFIRM = "" ]]; then
  RGFILES_RUN_CONFIRM="1"
fi
set -euf -o pipefail

if [[ $# -lt 2 ]]; then
  echo "Recursively execute a command on all files listed by " \
    "the 'rg --files' command."
  echo
  echo "Usage: $0 <directory> <command> <arg1> [args...]" >&2
  echo
  exit 1
fi

display_quoted_args() {
  local first=1
  local arg
  for arg in "$@"; do
    escaped_arg="${arg//\"/\\\"}"

    if [[ $first -ne 0 ]]; then
      first=0
    else
      printf " "
    fi

    if [[ "$escaped_arg" =~ \  ]]; then
      # Quote and escape the argument if it contains spaces
      printf "\"%s\"" "$escaped_arg"
    else
      # Display the argument without quoting if it does not contain spaces
      printf "%s" "$escaped_arg"
    fi
  done
}

#
# Directory
#
DIR="$1"
shift

if ! [[ -d "$DIR" ]]; then
  echo "Error: The specified directory does not exist: $DIR" >&2
  exit 1
fi

#
# RUN
#

RGFILES_CMD=(walk "$DIR")
PARALLEL_CMD=(qparallel "$@")

if [[ $RGFILES_RUN_CONFIRM -ne 0 ]]; then
  # display_quoted_args "[DEBUG]" "${RGFILES_CMD[@]}" "|" "${PARALLEL_CMD[@]}"
  echo -n "[COMMAND] "
  display_quoted_args "$@"
  echo
  echo
  read -r -p "Execute against all the files in '$DIR'? [y,n] " ANSWER
  if [[ "$ANSWER" != "y" ]]; then
    echo "Interrupted." >&2
    exit 1
  fi
fi

"${RGFILES_CMD[@]}" | "${PARALLEL_CMD[@]}"
