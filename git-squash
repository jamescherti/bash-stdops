#!/usr/bin/env bash
#
# Requirements:
#   - git
#
# Author: James Cherti
# URL: https://github.com/jamescherti/bash-stdops
#
# Description:
# ------------
# A script to squash new Git commits between the current branch and a specified
# branch.
#
# Usage:
#   ./script_name.sh <other-git-branch>
#
# Features:
# - Compares the current branch with the specified branch.
# - Displays a summary of new commits to be squashed.
# - Prompts for confirmation.
# - Automatically squashes all new commits into one, retaining the message of
#   the first commit.
#
# License:
# --------
# Copyright (C) 2012-2025 James Cherti
#
# Distributed under terms of the GNU General Public License version 3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -euf -o pipefail

git_log() {
  git log "$1..$2" --oneline --no-merges
}

main() {
  if [[ $# -eq 0 ]]; then
    echo "Squash new Git commits between the current branch and a " \
      "specified branch." >&2
    echo "" >&2
    echo "Usage: $0 <other-git-branch>" >&2
    exit 1
  fi

  local current_branch_name
  current_branch_name=$(git symbolic-ref HEAD --short)

  local other_branch_name
  other_branch_name="$1"

  # Ensure the branch to compare is different from the current branch
  if [[ $current_branch_name = "$other_branch_name" ]]; then
    echo "Error: The branch must be different from the current " \
      "branch '$current_branch_name'." >&2
    exit 1
  fi

  # Calculate the number of commits between the branches
  local num_new_commits
  num_new_commits=$(git_log "$other_branch_name" "$current_branch_name" \
    | wc -l)
  if [[ $num_new_commits -lt 2 ]]; then
    git_log "$other_branch_name" "$current_branch_name"
    echo
    echo "Nothing to squash." >&2
    exit 1
  fi

  if [[ $num_new_commits -gt 4 ]]; then
    local answer
    git_log "$other_branch_name" "$current_branch_name"
    echo
    read -r -p "Merge $num_new_commits commits? [y,n] " answer
    if [[ "$answer" != "y" ]]; then
      echo "Operation aborted." >&2
      exit 1
    fi
  else
    echo "Commits to squash:"
    echo "------------------"
    git_log "$other_branch_name" "$current_branch_name"
    echo
  fi

  local commit_message
  commit_message=$(git log --max-count=1 --pretty=%B)
  # commit_message=$(git log "--skip=$((num_new_commits - 1))" \
  #   --max-count=1 --pretty=%B)

  # Squash
  echo "Squashing commits:"
  echo "------------------"
  git reset --soft "HEAD~$num_new_commits"
  git commit -m "$commit_message"

  echo
  echo 'Commit message:'
  echo '---------------'
  echo "$commit_message"

  echo
  echo "Resulting commits:"
  echo "------------------"
  git_log "$other_branch_name" "$current_branch_name"

  exit 0
}

main "$@"
